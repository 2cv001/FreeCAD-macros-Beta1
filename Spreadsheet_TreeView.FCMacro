




#Spreadsheet_TreeView.FCMacro

# Sens TreeView->Spreadsheet
# place dans la cellule sélecionnée du spreadsheet 
# la formule qui désigne a propriété sélecionnée dans le treeView
# en option avec le truc qui va bien pour éviter les références circulaires
#
# Sens SpreadSheet-> TreeView 
# Place dans la propriété sélecionnée du treeview l'expression qui fait référence
# à la celule sélecionnée du spreadsheet. 
# Avec son alias si elle en a un sinon avec "C3"


# Sens SpreadSheet-> TreeView 
# Place dans la propriété sélecionnée du treeview l'expression qui fait référence
# à la celule sélecionnée du spreadsheet. 
# Avec son alias si elle en a un sinon avec "C3"
#
# Récupérer la cellule Cel qui est sélectionnée
# Récupérer le nom de la propriété qui est sélecionnée cis parents
# Calculer l'expression à placer dans la propriété
# Mettre l'expression dans la propriété

Récupérer le spreadsheet actif

# Récupérer la cellule Cel qui est sélectionnée

print('Gui.activeView().currentIndex()',Gui.activeView().currentIndex()) 
cel=Gui.activeView().currentIndex()


# Récupérer le nom de la propriété qui est sélecionnée cis parents
def selectedPropertiesInTreeView():
#------------------------------------------------
# get selected properties in treeView 
# select only one object and one or more property
# return object Nae, array with first property name and its parents
# props to be able to get athers properties selectedd 
#------------------------------------------------

    def has_parent(index):
        return index.parent().isValid()

    def extract_value_expression(string):
        if  string.count('(') == 0 or chaine.count(')'):
            return string,''
            
        string = str(string)
        parts = string.split('(')
        expression = parts[-1]
        value = string.rpartition('(')[0].strip()
        s = string.rpartition('(')[2]
        expression=s.replace(')', '').strip()
        return value, expression      



    props=[]
    for tree in trees:
        prop=[]
        n= 0
        for index in tree.selectedIndexes():
            n=n+1
            itemData = index.model().itemData(index)
            if itemData!={} :
                if 0 in itemData  :
                    if n==1 :   
                        tabProperty=[itemData[0]]
                        parent = index.parent()
                        tabProperty.append(parent.data())
                        while has_parent(parent):
                            parent=parent.parent()
                            tabProperty.append(parent.data())
   
                        prop.append(tabProperty) 

                    elif n==2 :
                        prop.append(itemData[0])  # value                       
                        
                    if 3 in itemData and n==2 : # tip
                        prop.append(itemData[3])
                    else : 
                        prop.append('')
            if n ==2 :
                props.append(prop)
                prop=[]
                n=0
    objectName=props[len(props)-1][0]
    # le premier élement de props[0][0] est propertyName, le reste sont les parents
    propertyName= props[0][0][0] 
    t=props[0][0].copy()
    t.pop(0) # on retire le premier élément  qui est donc propertyName
    propertyParents=t

    
    propertiesName=[]
    propertiesParents=[]
    propertiesTip=[]
    propertiesValue=[]
    propertiesExpression=[]
    for i in range(len(props) - 1):
        if len(props[i])< 3:
            print('Something is wrong to get selected properties. '+
                'Perhaps 2 or more objects were selected.')
            continue  

        propertyName = props[i][0][0]
        t=props[i][0].copy()
        t.pop(0) # on retire le premier élément  qui est donc propertyName
        propertyParents=t
        propertyTip=props[i][3]
        val=props[i][2]
        value,expression=extract_value_expression(val)   
        propertiesName.append(propertyName) 
        propertiesParents.append(propertyParents)
        propertiesTip.append(propertyTip)
        propertiesValue.append(value)
        propertiesExpression.append(expression)      
      
    return objectName,propertiesName,propertiesParents,propertiesTip, propertiesValue,propertiesExpression,props


(objectName,propertiesName,propertiesParents,propertiesTip,propertiesValue,
 propertiesExpression,props) = selectedPropertiesInTreeView()
print('objectName,propertiesName,propertiesParents,propertiesTip,propertiesValue,propertiesExpression',objectName,propertiesName,propertiesParents,propertiesTip,propertiesValue,propertiesExpression,props )



# Calculer l'expression à placer dans la propriété